package main

import "strconv"

// Helper function to generate consistent avatar color
func getAvatarColor(username string) string {
	colors := []string{
		"bg-mauve", "bg-blue", "bg-green", "bg-yellow",
		"bg-red", "bg-pink", "bg-sapphire", "bg-teal",
		"bg-peach", "bg-lavender", "bg-sky", "bg-maroon",
	}
	
	hash := 0
	for i := 0; i < len(username); i++ {
		hash += int(username[i])
	}
	return colors[hash%len(colors)]
}

// User avatar component
templ UserAvatar(username string, size string) {
	<div class={ "rounded-full text-white font-bold flex-shrink-0 shadow-lg border-2 border-surface2 hover:scale-110 transition-transform duration-200 flex items-center justify-center", size, getAvatarColor(username) }>
		if len(username) > 0 {
			{ string(username[0]) }
		} else {
			?
		}
	</div>
}

// Stats card component
templ StatsCard(title, value, colorClass string) {
	<div class="bg-surface1 rounded-lg border border-surface2 p-4 text-center">
		<div class={ "text-2xl font-bold", colorClass }>{ value }</div>
		<div class="text-sm text-subtext0 mt-1">{ title }</div>
	</div>
}

// User card component
templ UserCard(username string, messageCount int) {
	<div class="flex items-center justify-between p-3 bg-surface1 border border-surface2 rounded-lg hover:bg-surface2 transition-colors">
		<div class="flex items-center space-x-3">
			@UserAvatar(username, "w-8 h-8")
			<div class="font-medium text-text">{ username }</div>
		</div>
		<div class="text-right">
			<div class="text-lg font-semibold text-text">{ strconv.Itoa(messageCount) }</div>
			<div class="text-xs text-subtext0">messages</div>
		</div>
	</div>
}

// Button component
templ Button(text, className string) {
	<button class={ className }>{ text }</button>
}

// Input component
templ Input(inputType, placeholder, className, id string) {
	<input type={ inputType } placeholder={ placeholder } class={ className } id={ id }/>
}

// Notification component
templ Notification(message, notificationType string) {
	<div class={ "notification", "notification-" + notificationType }>
		<div class="text-lg mr-3 font-bold">
			switch notificationType {
				case "success":
					✓
				case "error":
					✗
				case "info":
					ℹ
				default:
					!
			}
		</div>
		<div class="flex-1">{ message }</div>
		<button class="bg-none border-none text-lg cursor-pointer ml-3 p-0 w-5 h-5 flex items-center justify-center opacity-70 hover:opacity-100" onclick="this.parentElement.remove()">×</button>
	</div>
}

// Message component
templ MessageComponent(username, text, timestamp string) {
	<div class="flex items-start space-x-4 mb-6 group hover:bg-surface1/50 p-4 rounded-xl transition-all duration-300 message-enter hover:scale-[1.01] hover:shadow-lg">
		@UserAvatar(username, "w-12 h-12")
		<div class="flex-1 min-w-0">
			<div class="flex items-baseline space-x-2 mb-2">
				<span class="font-semibold text-text text-sm">{ username }</span>
				<span class="text-xs text-subtext0">{ timestamp }</span>
			</div>
			<div class="bg-surface0 border border-surface2 rounded-2xl px-4 py-3 shadow-lg hover:shadow-xl hover:border-overlay0 hover:bg-surface1 transition-all duration-300 relative before:absolute before:left-[-8px] before:top-4 before:w-0 before:h-0 before:border-t-8 before:border-t-transparent before:border-b-8 before:border-b-transparent before:border-r-8 before:border-r-surface0">
				<p class="text-text text-base leading-relaxed m-0 font-medium">{ text }</p>
			</div>
		</div>
	</div>
}